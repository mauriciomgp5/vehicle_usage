<?php

namespace App\Services;

use Illuminate\Support\Facades\Log;
use App\Models\Vehicle;
use App\Models\VehicleUsage;
use App\Models\User;
use App\Models\Occurrence;
use App\Models\OccurrencePhoto;

class MenuService
{
    protected $redisSessionService;
    private $menus = [
        'main_menu' => [
            'message' => "üöó SISTEMA DE GEST√ÉO DE FROTA\n\n" .
                        "üìã Menu Principal:\n\n" .
                        "1Ô∏è‚É£ - Pegar Ve√≠culo\n" .
                        "2Ô∏è‚É£ - Devolver Ve√≠culo\n" .
                        "3Ô∏è‚É£ - Consultar Status\n" .
                        "0Ô∏è‚É£ - Voltar ao Menu Principal\n\n" .
                        "‚ùå Para limpar sess√£o, digite /clear",
            'options' => [
                '1' => 'register_departure',
                '2' => 'register_return',
                '3' => 'check_status',
                '0' => 'main_menu'
            ]
        ],
        'register_departure' => [
            'message' => "üöó RETIRADA DE VE√çCULO\n\n" .
                        "üìù Por favor, informe a placa do ve√≠culo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Digite parte da placa (ex: ABC, 1234)\n" .
                        "‚Ä¢ Verifique se a placa est√° correta\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'register_return' => [
            'message' => "üöó DEVOLU√á√ÉO DE VE√çCULO\n\n" .
                        "üìù Por favor, informe a placa do ve√≠culo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Digite parte da placa (ex: ABC, 1234)\n" .
                        "‚Ä¢ Verifique se a placa est√° correta\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'check_status' => [
            'message' => "üîç CONSULTA DE STATUS\n\n" .
                        "üìù Por favor, informe a placa do ve√≠culo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Digite parte da placa (ex: ABC, 1234)\n" .
                        "‚Ä¢ Verifique se a placa est√° correta\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'select_vehicle' => [
            'message' => "üöó SELE√á√ÉO DE VE√çCULO\n\n" .
                        "üìã Selecione o n√∫mero do ve√≠culo desejado:\n\n" .
                        "üí° Dica: Digite apenas o n√∫mero correspondente ao ve√≠culo\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'ask_km' => [
            'message' => "üöó REGISTRO DE QUILOMETRAGEM\n\n" .
                        "üìä Por favor, informe o KM do ve√≠culo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Verifique o painel do ve√≠culo\n" .
                        "‚Ä¢ Digite apenas n√∫meros\n" .
                        "‚Ä¢ Use ponto para decimais (ex: 12345.6)\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'active_usage_menu' => [
            'message' => "üöó VE√çCULO EM USO\n\n" .
                        "üìã Op√ß√µes dispon√≠veis:\n\n" .
                        "1Ô∏è‚É£ - Devolver ve√≠culo\n" .
                        "2Ô∏è‚É£ - Registrar ocorr√™ncia\n\n" .
                        "üí° Dica: Se houver algum problema com o ve√≠culo, registre uma ocorr√™ncia antes de devolv√™-lo.\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => [
                '1' => 'return_km',
                '2' => 'register_ocorrencia'
            ]
        ],
        'return_km' => [
            'message' => "üöó DEVOLU√á√ÉO DE VE√çCULO\n\n" .
                        "üìä Por favor, informe o KM final do ve√≠culo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Verifique o painel do ve√≠culo\n" .
                        "‚Ä¢ Digite apenas n√∫meros\n" .
                        "‚Ä¢ Use ponto para decimais (ex: 12345.6)\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'register_ocorrencia' => [
            'message' => "‚ö†Ô∏è REGISTRO DE OCORR√äNCIA\n\n" .
                        "üìù Por favor, descreva brevemente a ocorr√™ncia:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Seja claro e objetivo\n" .
                        "‚Ä¢ Exemplos: 'Pneu furou', 'Arranh√£o lateral'\n" .
                        "‚Ä¢ Descreva o problema com detalhes\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'register_ocorrencia_photos' => [
            'message' => "üì∏ REGISTRO DE FOTOS\n\n" .
                        "üìã Op√ß√µes dispon√≠veis:\n\n" .
                        "1Ô∏è‚É£ - Finalizar registro\n" .
                        "2Ô∏è‚É£ - Cancelar ocorr√™ncia\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Envie fotos da ocorr√™ncia (uma por vez)\n" .
                        "‚Ä¢ Adicione uma legenda para cada foto\n" .
                        "‚Ä¢ Envie quantas fotos forem necess√°rias\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => [
                '1' => 'finalize_occurrence',
                '2' => 'cancel_occurrence'
            ]
        ],
        'ask_name' => [
            'message' => "üëã BEM-VINDO AO SISTEMA\n\n" .
                        "üìù Por favor, informe seu nome completo:\n\n" .
                        "üí° Dicas:\n" .
                        "‚Ä¢ Digite seu nome completo\n" .
                        "‚Ä¢ Exemplo: Jo√£o da Silva\n" .
                        "‚Ä¢ M√≠nimo 2 caracteres\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ],
        'confirm_checkout' => [
            'message' => "‚úÖ CONFIRMA√á√ÉO DE SA√çDA\n\n" .
                        "üìã Confirme os dados para registrar a sa√≠da:\n\n" .
                        "1Ô∏è‚É£ - CONFIRMAR\n" .
                        "0Ô∏è‚É£ - CANCELAR\n\n" .
                        "‚ùå Para cancelar, digite /clear",
            'options' => []
        ]
    ];

    public function __construct(RedisSessionService $redisSessionService)
    {
        $this->redisSessionService = $redisSessionService;
    }

    public function getMenuMessage(string $menuName): string
    {
        return $this->menus[$menuName]['message'] ?? $this->menus['main_menu']['message'];
    }

    public function getOrCreateUser($phone, $session = null)
    {
        $user = User::where('phone', $phone)->first();
        if ($user) {
            return $user;
        }
        return null;
    }

    public function checkActiveUsage($userId)
    {
        return VehicleUsage::where('user_id', $userId)->whereNull('checkin_at')->first();
    }

    public function processOption(string $currentMenu, string $option): string
    {
        if (!isset($this->menus[$currentMenu])) {
            return $this->menus['main_menu']['message'];
        }

        $nextMenu = $this->menus[$currentMenu]['options'][$option] ?? 'main_menu';
        return $this->getMenuMessage($nextMenu);
    }

    public function cleanPhone($phone)
    {
        return preg_replace('/@.*$/', '', $phone);
    }

    private function notifySupervisors($message)
    {
        $supervisors = User::where('is_supervisor', true)->get();
        
        foreach ($supervisors as $supervisor) {
            try {
                // Aqui vamos usar o EvolutionApiService
                app('App\Services\EvolutionApiService')->sendMessage(
                    $supervisor->phone . '@s.whatsapp.net',
                    "üö® MONITORAMENTO DE FROTA üö®\n\n" . $message
                );
                
                Log::info('Notifica√ß√£o enviada para supervisor:', [
                    'supervisor' => $supervisor->name,
                    'phone' => $supervisor->phone,
                    'message' => $message
                ]);
            } catch (\Exception $e) {
                Log::error('Erro ao notificar supervisor:', [
                    'supervisor' => $supervisor->name,
                    'error' => $e->getMessage()
                ]);
            }
        }
    }

    public function handleUserResponse(string $phone, string $message, string $messageType = 'text', ?string $mediaId = null, ?string $caption = null, ?array $imageData = null): array
    {
        $cleanPhone = $this->cleanPhone($phone);
        
        // Comando especial para limpar sess√£o
        if (trim(strtolower($message)) === '/clear') {
            $this->redisSessionService->deleteSession($phone);
            $this->redisSessionService->updateMenu($phone, 'main_menu');
            return [
                'message' => "üßπ Sess√£o limpa com sucesso!\n\n" . $this->getMenuMessage('main_menu'),
                'menu' => 'main_menu'
            ];
        }
        
        $currentMenu = $this->redisSessionService->getCurrentMenu($phone);
        $session = $this->redisSessionService->getSession($phone);

        // Se est√° aguardando o nome, criar usu√°rio e seguir
        if ($currentMenu === 'ask_name') {
            // Valida√ß√£o b√°sica do nome
            $name = trim($message);
            if (strlen($name) < 2) {
                return [
                    'message' => "Por favor, informe um nome v√°lido com pelo menos 2 caracteres:",
                    'menu' => 'ask_name'
                ];
            }
            
            // Cria o usu√°rio com o nome informado
            $user = User::create([
                'name' => $name,
                'phone' => $cleanPhone,
                'email' => $cleanPhone . '@fake.com',
                'password' => bcrypt('senha_padrao'),
            ]);
            $this->redisSessionService->deleteSession($phone); // Limpa sess√£o para novo fluxo
            $this->redisSessionService->updateMenu($phone, 'main_menu');
            return [
                'message' => "‚úÖ Cadastro realizado com sucesso, {$user->name}!\n\nAgora voc√™ pode utilizar nosso sistema.",
                'menu' => 'main_menu',
                'send_menu_next' => true
            ];
        }

        // Sempre buscar usu√°rio antes de qualquer a√ß√£o
        $user = $this->getOrCreateUser($cleanPhone, $session);
        if (!$user) {
            // Se n√£o existe, pedir o nome (SEM salvar a mensagem atual)
            $this->redisSessionService->updateMenu($phone, 'ask_name');
            return [
                'message' => $this->getMenuMessage('ask_name'),
                'menu' => 'ask_name'
            ];
        }
        $userId = $user->id;

        // Checagem de uso ativo ao iniciar conversa
        if ($currentMenu === 'main_menu') {
            $active = $this->checkActiveUsage($userId);
            if ($active) {
                $this->redisSessionService->updateMenu($phone, 'active_usage_menu');
                return [
                    'message' => $this->getMenuMessage('active_usage_menu'),
                    'menu' => 'active_usage_menu'
                ];
            }
        }

        // Fluxo especial para busca de ve√≠culos
        if (in_array($currentMenu, ['register_departure', 'register_return', 'check_status'])) {
            $veiculos = Vehicle::where('plate', 'like', "%{$message}%")->get();
            if ($veiculos->count() === 0) {
                return [
                    'message' => "‚ùå Nenhum ve√≠culo encontrado com essa placa.\n\n" .
                               "üí° Dicas:\n" .
                               "‚Ä¢ Digite parte da placa (ex: ABC, 1234, DEF1234)\n" .
                               "‚Ä¢ Verifique se a placa est√° correta\n\n" .
                               "Por favor, tente novamente:",
                    'menu' => $currentMenu
                ];
            } elseif ($veiculos->count() === 1) {
                $veiculo = $veiculos->first();
                $this->redisSessionService->setSessionData($phone, 'vehicle_id', $veiculo->id);
                $this->redisSessionService->updateMenu($phone, 'ask_km');
                return [
                    'message' => "‚úÖ Ve√≠culo encontrado: {$veiculo->brand} {$veiculo->model} ({$veiculo->plate})\n\nPor favor, informe o KM inicial do ve√≠culo:",
                    'menu' => 'ask_km'
                ];
            } else {
                // Mais de um ve√≠culo encontrado
                $lista = "üöó Foram encontrados " . $veiculos->count() . " ve√≠culos:\n\n";
                foreach ($veiculos as $idx => $v) {
                    $lista .= ($idx+1) . " - {$v->brand} {$v->model} ({$v->plate})\n";
                }
                $this->redisSessionService->setSessionData($phone, 'vehicle_options', $veiculos->pluck('id')->toArray());
                $this->redisSessionService->updateMenu($phone, 'select_vehicle');
                return [
                    'message' => $lista . "\nüìù Responda com o n√∫mero do ve√≠culo desejado:",
                    'menu' => 'select_vehicle'
                ];
            }
        }

        // Sele√ß√£o de ve√≠culo ap√≥s m√∫ltiplos resultados
        if ($currentMenu === 'select_vehicle') {
            $options = $this->redisSessionService->getSessionData($phone, 'vehicle_options', []);
            $idx = intval($message) - 1;
            if (isset($options[$idx])) {
                $vehicleId = $options[$idx];
                $veiculo = Vehicle::find($vehicleId);
                $this->redisSessionService->setSessionData($phone, 'vehicle_id', $veiculo->id);
                $this->redisSessionService->updateMenu($phone, 'ask_km');
                return [
                    'message' => "‚úÖ Ve√≠culo selecionado: {$veiculo->brand} {$veiculo->model} ({$veiculo->plate})\n\nPor favor, informe o KM inicial do ve√≠culo:",
                    'menu' => 'ask_km'
                ];
            } else {
                return [
                    'message' => "‚ùå Op√ß√£o inv√°lida.\n\nPor favor, responda com o n√∫mero do ve√≠culo desejado (1, 2, 3...):",
                    'menu' => 'select_vehicle'
                ];
            }
        }

        // Se est√° pedindo o KM, mostra confirma√ß√£o antes de registrar
        if ($currentMenu === 'ask_km') {
            Log::info('DEBUG: Entrando no ask_km com message: ' . $message);
            $km = floatval($message);
            $vehicleId = $this->redisSessionService->getSessionData($phone, 'vehicle_id');
            $veiculo = Vehicle::find($vehicleId);
            
            // Valida√ß√£o: verificar √∫ltimo KM final do ve√≠culo
            $ultimoUso = VehicleUsage::where('vehicle_id', $vehicleId)
                                    ->whereNotNull('final_km')
                                    ->orderBy('checkin_at', 'desc')
                                    ->first();
            
            if ($ultimoUso && $km < $ultimoUso->final_km) {
                return [
                    'message' => "‚ùå Erro: KM inicial ({$km}) n√£o pode ser menor que o √∫ltimo KM final registrado ({$ultimoUso->final_km}).\n\n" .
                               "Por favor, informe um KM inicial v√°lido:",
                    'menu' => 'ask_km'
                ];
            }
            
            // Salva o KM para usar na confirma√ß√£o
            $this->redisSessionService->setSessionData($phone, 'initial_km', $km);
            $this->redisSessionService->updateMenu($phone, 'confirm_checkout');
            
            Log::info('DEBUG: Mudando menu para confirm_checkout');
            
            return [
                'message' => "üìã Confirme os dados para registrar a sa√≠da:\n\n" .
                           "üöó Ve√≠culo: {$veiculo->brand} {$veiculo->model} ({$veiculo->plate})\n" .
                           "üìä KM inicial: {$km}\n" .
                           "üïê Data/Hora: " . now()->format('d/m/Y H:i') . "\n\n" .
                           "1 - ‚úÖ CONFIRMAR\n" .
                           "0 - ‚ùå CANCELAR",
                'menu' => 'confirm_checkout'
            ];
        }

        // Confirma√ß√£o da sa√≠da
        if ($currentMenu === 'confirm_checkout') {
            $response = trim($message);
            
            if ($response === '1') {
                // Confirma - registra a sa√≠da
                $vehicleId = $this->redisSessionService->getSessionData($phone, 'vehicle_id');
                $km = $this->redisSessionService->getSessionData($phone, 'initial_km');
                $veiculo = Vehicle::find($vehicleId);
                
                VehicleUsage::create([
                    'user_id' => $userId,
                    'vehicle_id' => $veiculo->id,
                    'initial_km' => $km,
                    'checkout_at' => now(),
                    'purpose' => '',
                ]);
                
                // Notificar supervisores sobre a sa√≠da
                $user = User::find($userId);
                $this->notifySupervisors(
                    "üöó SA√çDA DE VE√çCULO\n\n" .
                    "üë§ Usu√°rio: {$user->name}\n" .
                    "üì± Telefone: {$user->phone}\n" .
                    "üöô Ve√≠culo: {$veiculo->brand} {$veiculo->model}\n" .
                    "üè∑Ô∏è Placa: {$veiculo->plate}\n" .
                    "üìä KM inicial: {$km}\n" .
                    "üïê Hor√°rio: " . now()->format('d/m/Y H:i')
                );
                
                $this->redisSessionService->deleteSession($phone);
                return [
                    'message' => "‚úÖ Sa√≠da registrada com sucesso!\n\n" .
                               "üöó Ve√≠culo: {$veiculo->brand} {$veiculo->model} ({$veiculo->plate})\n" .
                               "üìä KM inicial: {$km}\n" .
                               "üïê Hor√°rio: " . now()->format('d/m/Y H:i') . "\n\n" .
                               "Boa viagem! üõ£Ô∏è",
                    'menu' => 'none'
                ];
            } elseif ($response === '0') {
                // Cancela - volta ao menu principal
                $this->redisSessionService->deleteSession($phone);
                return [
                    'message' => "‚ùå Opera√ß√£o cancelada.\n\n" . $this->getMenuMessage('main_menu'),
                    'menu' => 'main_menu'
                ];
            } else {
                // Resposta inv√°lida
                return [
                    'message' => "‚ùì Resposta inv√°lida.\n\n" .
                               "Por favor, digite:\n" .
                               "1 - ‚úÖ CONFIRMAR\n" .
                               "0 - ‚ùå CANCELAR",
                    'menu' => 'confirm_checkout'
                ];
            }
        }

        // Menu de uso ativo: devolu√ß√£o ou ocorr√™ncia
        if ($currentMenu === 'active_usage_menu') {
            if ($message == '1') {
                $this->redisSessionService->updateMenu($phone, 'return_km');
                return [
                    'message' => $this->getMenuMessage('return_km'),
                    'menu' => 'return_km'
                ];
            } elseif ($message == '2') {
                $this->redisSessionService->updateMenu($phone, 'register_ocorrencia');
                return [
                    'message' => $this->getMenuMessage('register_ocorrencia'),
                    'menu' => 'register_ocorrencia'
                ];
            } else {
                return [
                    'message' => "Op√ß√£o inv√°lida.\n" . $this->getMenuMessage('active_usage_menu'),
                    'menu' => 'active_usage_menu'
                ];
            }
        }

        // Devolu√ß√£o: pede KM final, finaliza registro e encerra sess√£o
        if ($currentMenu === 'return_km') {
            $active = $this->checkActiveUsage($userId);
            if ($active) {
                $kmFinal = floatval($message);
                $kmInicial = floatval($active->initial_km);
                
                // Valida√ß√£o: KM final n√£o pode ser menor que inicial
                if ($kmFinal < $kmInicial) {
                    return [
                        'message' => "‚ùå Erro: KM final ({$kmFinal}) n√£o pode ser menor que o KM inicial ({$kmInicial}).\n\n" .
                                   "Por favor, informe um KM final v√°lido:",
                        'menu' => 'return_km'
                    ];
                }
                
                $active->final_km = $kmFinal;
                $active->checkin_at = now();
                $active->save();
                
                // Notificar supervisores sobre o retorno
                $this->notifySupervisors(
                    "üèÅ RETORNO DE VE√çCULO\n\n" .
                    "üë§ Usu√°rio: {$active->user->name}\n" .
                    "üì± Telefone: {$active->user->phone}\n" .
                    "üöô Ve√≠culo: {$active->vehicle->brand} {$active->vehicle->model}\n" .
                    "üè∑Ô∏è Placa: {$active->vehicle->plate}\n" .
                    "üìä KM final: {$kmFinal}\n" .
                    "üìè Dist√¢ncia: " . ($kmFinal - $kmInicial) . " km\n" .
                    "üïê Hor√°rio: " . now()->format('d/m/Y H:i')
                );
            }
            $this->redisSessionService->deleteSession($phone);
            return [
                'message' => "‚úÖ DEVOLU√á√ÉO REGISTRADA COM SUCESSO!\n\n" .
                           "üöó Ve√≠culo: {$active->vehicle->brand} {$active->vehicle->model}\n" .
                           "üè∑Ô∏è Placa: {$active->vehicle->plate}\n" .
                           "üìä KM inicial: {$kmInicial}\n" .
                           "üìä KM final: {$kmFinal}\n" .
                           "üìè Dist√¢ncia percorrida: " . ($kmFinal - $kmInicial) . " km\n" .
                           "‚è±Ô∏è Tempo de uso: " . $active->checkout_at->diffForHumans($active->checkin_at) . "\n" .
                           "üïê Data/Hora: " . now()->format('d/m/Y H:i') . "\n\n" .
                           "Obrigado por utilizar nosso sistema! üôè\n" .
                           "Voltando ao menu principal...",
                'menu' => 'main_menu',
                'send_menu_next' => true
            ];
        }

        // Ocorr√™ncia: salva mensagem/foto, encerra sess√£o
        if ($currentMenu === 'register_ocorrencia') {
            $active = $this->checkActiveUsage($userId);
            if ($active) {
                $description = trim($message);
                
                // Valida√ß√£o m√≠nima da descri√ß√£o
                if (strlen($description) < 5) {
                    return [
                        'message' => "‚ùå Descri√ß√£o muito curta.\n\n" .
                                   "Por favor, descreva a ocorr√™ncia com mais detalhes (m√≠nimo 5 caracteres):",
                        'menu' => 'register_ocorrencia'
                    ];
                }
                
                // Criar a ocorr√™ncia inicial (sem fotos ainda)
                $occurrence = Occurrence::create([
                    'vehicle_usage_id' => $active->id,
                    'description' => $description,
                    'type' => 'incident',
                    'severity' => 'medium'
                ]);
                
                // Salvar ID da ocorr√™ncia na sess√£o para adicionar fotos
                $this->redisSessionService->setSessionData($phone, 'occurrence_id', $occurrence->id);
                $this->redisSessionService->setSessionData($phone, 'photos_count', 0);
                $this->redisSessionService->updateMenu($phone, 'register_ocorrencia_photos');
                
                return [
                    'message' => "‚úÖ Ocorr√™ncia criada!\n\n" .
                               "üìù Descri√ß√£o: {$description}\n\n" .
                               $this->getMenuMessage('register_ocorrencia_photos'),
                    'menu' => 'register_ocorrencia_photos'
                ];
            }
            
            $this->redisSessionService->deleteSession($phone);
            return [
                'message' => "‚ùå Erro: Nenhum uso ativo encontrado.",
                'menu' => 'none'
            ];
        }

        // NOVO FLUXO: Adicionando fotos √† ocorr√™ncia
        if ($currentMenu === 'register_ocorrencia_photos') {
            $occurrenceId = $this->redisSessionService->getSessionData($phone, 'occurrence_id');
            $photosCount = $this->redisSessionService->getSessionData($phone, 'photos_count', 0);
            
            if (!$occurrenceId) {
                $this->redisSessionService->deleteSession($phone);
                return [
                    'message' => "‚ùå Erro: Sess√£o perdida. Tente novamente.",
                    'menu' => 'main_menu'
                ];
            }
            
            // Se usu√°rio escolheu finalizar
            if ($message === '1') {
                return $this->finalizeOccurrence($phone, $occurrenceId, $photosCount);
            }
            
            // Se usu√°rio escolheu cancelar
            if ($message === '2') {
                return $this->cancelOccurrence($phone, $occurrenceId);
            }
            
            // Se √© uma imagem
            if ($messageType === 'image' && $imageData) {
                return $this->addPhotoToOccurrence($phone, $occurrenceId, $imageData, $caption, $photosCount);
            }
            
            // Se √© texto mas n√£o √© "1" ou "2", explicar novamente
            return [
                'message' => "üì∑ Por favor:\n\n" .
                           "‚Ä¢ Envie uma foto da ocorr√™ncia, OU\n" .
                           "‚Ä¢ Digite '1' para finalizar, OU\n" .
                           "‚Ä¢ Digite '2' para cancelar\n\n" .
                           "üìä Fotos adicionadas: {$photosCount}",
                'menu' => 'register_ocorrencia_photos'
            ];
        }

        // Fluxo padr√£o
        $response = $this->processOption($currentMenu, $message);
        $nextMenu = $this->menus[$currentMenu]['options'][$message] ?? 'main_menu';
        $this->redisSessionService->updateMenu($phone, $nextMenu);
        return [
            'message' => $response,
            'menu' => $nextMenu
        ];
    }

    private function addPhotoToOccurrence($phone, $occurrenceId, $imageData, $caption, $currentCount)
    {
        try {
            // Salva a imagem usando o WhatsAppMediaService
            $mediaService = app(WhatsAppMediaService::class);
            $savedImage = $mediaService->saveImageFromBase64($imageData, $caption);
            
            if (!$savedImage) {
                return [
                    'message' => "‚ùå Erro ao salvar a imagem. Tente novamente.\n\n" .
                               "üìä Fotos j√° adicionadas: {$currentCount}",
                    'menu' => 'register_ocorrencia_photos'
                ];
            }
            
            // Salva a foto da ocorr√™ncia
            OccurrencePhoto::create([
                'occurrence_id' => $occurrenceId,
                'filename' => $savedImage['filename'],
                'original_filename' => $savedImage['original_filename'],
                'path' => $savedImage['path'],
                'mime_type' => $savedImage['mime_type'],
                'size' => $savedImage['size'],
                'caption' => $caption ?: 'Sem legenda'
            ]);
            
            // Atualiza contador de fotos
            $newCount = $currentCount + 1;
            $this->redisSessionService->setSessionData($phone, 'photos_count', $newCount);
            
            $captionText = $caption ? "'{$caption}'" : 'sem legenda';
            
            return [
                'message' => "‚úÖ Foto {$newCount} salva com sucesso!\n\n" .
                           "üìù Legenda: {$captionText}\n" .
                           "üìä Total de fotos: {$newCount}\n\n" .
                           "üì∑ Continue enviando fotos ou digite '1' para finalizar.",
                'menu' => 'register_ocorrencia_photos'
            ];
            
        } catch (\Exception $e) {
            Log::error('Erro ao adicionar foto √† ocorr√™ncia:', [
                'error' => $e->getMessage(),
                'occurrence_id' => $occurrenceId,
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'message' => "‚ùå Erro interno ao processar a imagem. Tente novamente.",
                'menu' => 'register_ocorrencia_photos'
            ];
        }
    }

    private function finalizeOccurrence($phone, $occurrenceId, $photosCount)
    {
        try {
            $occurrence = Occurrence::with(['vehicleUsage.user', 'vehicleUsage.vehicle', 'photos'])->find($occurrenceId);
            
            if (!$occurrence) {
                $this->redisSessionService->deleteSession($phone);
                return [
                    'message' => "‚ùå Erro: Ocorr√™ncia n√£o encontrada.",
                    'menu' => 'main_menu'
                ];
            }
            
            // Notificar supervisores sobre a ocorr√™ncia finalizada
            $photoText = $photosCount > 0 ? "\nüì∏ {$photosCount} foto(s) anexada(s)" : "\nüì∏ Nenhuma foto anexada";
            
            $this->notifySupervisors(
                "‚ö†Ô∏è OCORR√äNCIA FINALIZADA\n\n" .
                "üë§ Usu√°rio: {$occurrence->vehicleUsage->user->name}\n" .
                "üì± Telefone: {$occurrence->vehicleUsage->user->phone}\n" .
                "üöô Ve√≠culo: {$occurrence->vehicleUsage->vehicle->brand} {$occurrence->vehicleUsage->vehicle->model}\n" .
                "üè∑Ô∏è Placa: {$occurrence->vehicleUsage->vehicle->plate}\n" .
                "üìù Descri√ß√£o: {$occurrence->description}" .
                $photoText . "\n" .
                "üïê Hor√°rio: " . $occurrence->created_at->format('d/m/Y H:i')
            );
            
            $this->redisSessionService->deleteSession($phone);
            
            return [
                'message' => "‚úÖ Ocorr√™ncia registrada com sucesso!\n\n" .
                           "üìù Descri√ß√£o: {$occurrence->description}\n" .
                           "üì∏ Fotos anexadas: {$photosCount}\n" .
                           "üöó Ve√≠culo: {$occurrence->vehicleUsage->vehicle->brand} {$occurrence->vehicleUsage->vehicle->model}\n" .
                           "üè∑Ô∏è Placa: {$occurrence->vehicleUsage->vehicle->plate}\n" .
                           "üïê Data/Hora: " . $occurrence->created_at->format('d/m/Y H:i') . "\n\n" .
                           "Obrigado pelo registro! üìã",
                'menu' => 'none'
            ];
            
        } catch (\Exception $e) {
            Log::error('Erro ao finalizar ocorr√™ncia:', [
                'error' => $e->getMessage(),
                'occurrence_id' => $occurrenceId,
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->redisSessionService->deleteSession($phone);
            return [
                'message' => "‚ùå Erro interno ao finalizar ocorr√™ncia. Tente novamente.",
                'menu' => 'main_menu'
            ];
        }
    }

    private function cancelOccurrence($phone, $occurrenceId)
    {
        try {
            $occurrence = Occurrence::with(['photos'])->find($occurrenceId);
            
            if (!$occurrence) {
                $this->redisSessionService->deleteSession($phone);
                return [
                    'message' => "‚ùå Erro: Ocorr√™ncia n√£o encontrada.",
                    'menu' => 'main_menu'
                ];
            }
            
            // Deletar todas as fotos f√≠sicas do storage
            $mediaService = app(WhatsAppMediaService::class);
            foreach ($occurrence->photos as $photo) {
                $mediaService->deletePhoto($photo->path);
            }
            
            // Deletar a ocorr√™ncia (cascade vai deletar as fotos do banco)
            $occurrence->delete();
            
            // Limpar sess√£o
            $this->redisSessionService->deleteSession($phone);
            
            Log::info('Ocorr√™ncia cancelada pelo usu√°rio:', [
                'occurrence_id' => $occurrenceId,
                'phone' => $phone,
                'photos_deleted' => $occurrence->photos->count()
            ]);
            
            return [
                'message' => "üóëÔ∏è Ocorr√™ncia cancelada com sucesso!\n\n" .
                           "üìù Descri√ß√£o: {$occurrence->description}\n" .
                           "üì∏ {$occurrence->photos->count()} foto(s) removida(s)\n" .
                           "üöÆ Todos os dados foram apagados\n\n" .
                           "Voltando ao menu principal...",
                'menu' => 'main_menu',
                'send_menu_next' => true
            ];
            
        } catch (\Exception $e) {
            Log::error('Erro ao cancelar ocorr√™ncia:', [
                'error' => $e->getMessage(),
                'occurrence_id' => $occurrenceId,
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->redisSessionService->deleteSession($phone);
            return [
                'message' => "‚ùå Erro interno ao cancelar ocorr√™ncia. Sess√£o limpa.",
                'menu' => 'main_menu'
            ];
        }
    }
} 